import crypto from 'crypto'

export class CryptoHelper {
	static algorithm = 'aes-256-cbc'

	static key = Buffer.from(process.env.CRYPTO_KEY, 'hex') // generated by crypto.randomBytes(32).toString('hex')
	static iv = Buffer.from(process.env.CRYPTO_IV, 'hex') // generated by crypto.randomBytes(16).toString('hex')

	static encrypt(message) {
		const cipher = crypto.createCipheriv(this.algorithm, this.key, this.iv)
		return cipher.update(message, 'utf-8', 'hex') + cipher.final('hex')
	}

	static decrypt(encrypted) {
		try {
			const decipher = crypto.createDecipheriv(this.algorithm, this.key, this.iv)
			return decipher.update(encrypted, 'hex', 'utf-8') + decipher.final('utf8')
		} catch (err) {
			return null
		}
	}

	static hash(message, secret) {
		const hmac = crypto.createHmac('sha256', secret)
		const digest = hmac.update(message).digest('hex')
		return digest
	}

	static isEqual = (str1, str2) => {
		return crypto.timingSafeEqual(Buffer.from(str1), Buffer.from(str2))
	}
}